---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: car-storage-setup
  labels:
    app: car-storage
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: car-storage-setup-edit
  labels:
    app: car-storage
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: edit
subjects:
- kind: ServiceAccount
  name: car-storage-setup
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: car-storage-pvc
  labels:
    app: car-storage
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: car-storage-deployment
  labels:
    app: car-storage
    app.kubernetes.io/part-of: car-storage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: car-storage
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: car-storage
    spec:
      containers:
      - args:
        - minio server /data --console-address :9090
        command:
        - /bin/bash
        - -c
        envFrom:
        - secretRef:
            name: car-storage-root-user
        image: quay.io/minio/minio:latest
        name: car-storage
        ports:
        - containerPort: 9000
          name: api
        - containerPort: 9090
          name: console
        resources:
          limits:
            cpu: "2"
            memory: 2Gi
          requests:
            cpu: 200m
            memory: 1Gi
        volumeMounts:
        - mountPath: /data
          name: car-storage-volume
      volumes:
      - name: car-storage-volume
        persistentVolumeClaim:
          claimName: car-storage-pvc


---
apiVersion: batch/v1
kind: Job
metadata:
  name: create-car-storage-root-user
  labels:
    app: car-storage
    app.kubernetes.io/part-of: car-storage
spec:
  backoffLimit: 4
  template:
    metadata:
      labels:
        app: car-storage
    spec:
      containers:
      - args:
        - -ec
        - |-
          if [ -n "$(oc get secret car-storage-root-user -oname 2>/dev/null)" ]; then
            echo "Secret already exists. Skipping." >&2
            exit 0
          fi
          genpass() {
              < /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c"${1:-32}"
          }
          id=$(genpass 16)
          secret=$(genpass)
          cat << EOF | oc apply -f-
          apiVersion: v1
          kind: Secret
          metadata:
            name: car-storage-root-user
          type: Opaque
          stringData:
            MINIO_ROOT_USER: ${id}
            MINIO_ROOT_PASSWORD: ${secret}
          EOF
        command:
        - /bin/bash
        image: image-registry.openshift-image-registry.svc:5000/openshift/tools:latest
        imagePullPolicy: IfNotPresent
        name: create-car-storage-root-user
      restartPolicy: Never
      serviceAccountName: car-storage-setup
---
apiVersion: batch/v1
kind: Job
metadata:
  name: create-car-storage-buckets
  labels:
    app: car-storage
    app.kubernetes.io/part-of: car-storage
spec:
  template:
    metadata:
      labels:
        app: car-storage
    spec:
      containers:
      - args:
        - -ec
        - |-
          oc get secret car-storage-root-user
          env | grep MINIO
          cat << 'EOF' | python3
          import boto3, os

          s3 = boto3.client("s3",
                            endpoint_url="http://car-storage-service:9000",
                            aws_access_key_id=os.getenv("MINIO_ROOT_USER"),
                            aws_secret_access_key=os.getenv("MINIO_ROOT_PASSWORD"))

          for bucket in ['pipeline-artifacts', 'my-storage']:
              print(f'Creating bucket: {bucket}')
              if bucket not in [b["Name"] for b in s3.list_buckets()["Buckets"]]:
                  s3.create_bucket(Bucket=bucket)
          EOF
        command:
        - /bin/bash
        envFrom:
        - secretRef:
            name: car-storage-root-user
        image: image-registry.openshift-image-registry.svc:5000/redhat-ods-applications/s2i-generic-data-science-notebook:2023.2
        imagePullPolicy: IfNotPresent
        name: create-buckets
      initContainers:
      - args:
        - -ec
        - |-
          echo -n 'Waiting for car-storage root user secret'
          while ! oc get secret car-storage-root-user 2>/dev/null | grep -qF car-storage-root-user; do
            echo -n .
            sleep 5
          done; echo

          echo -n 'Waiting for car-storage deployment'
          while ! oc get deployment car-storage-deployment 2>/dev/null | grep -qF car-storage-deployment; do
            echo -n .
            sleep 5
          done; echo
          oc wait --for=condition=available --timeout=60s deployment/car-storage-deployment
          sleep 10
        command:
        - /bin/bash
        image: image-registry.openshift-image-registry.svc:5000/openshift/tools:latest
        imagePullPolicy: IfNotPresent
        name: wait-for-car-storage
      restartPolicy: Never
      serviceAccountName: car-storage-setup


---
apiVersion: batch/v1
kind: Job
metadata:
  name: create-ds-connections
  labels:
    app: car-storage
    app.kubernetes.io/part-of: car-storage
spec:
  template:
    spec:
      containers:
      - args:
        - -ec
        - |-
          echo -n 'Waiting for car-storage route'
          while ! oc get route car-storage-s3 2>/dev/null | grep -qF car-storage-s3; do
            echo -n .
            sleep 5
          done; echo

          echo -n 'Waiting for car-storage root user secret'
          while ! oc get secret car-storage-root-user 2>/dev/null | grep -qF car-storage-root-user; do
            echo -n .
            sleep 5
          done; echo

          MINIO_ROOT_USER=$(oc get secret car-storage-root-user -o template --template '{{.data.MINIO_ROOT_USER}}')
          MINIO_ROOT_PASSWORD=$(oc get secret car-storage-root-user -o template --template '{{.data.MINIO_ROOT_PASSWORD}}')
          MINIO_HOST=https://$(oc get route car-storage-s3 -o template --template '{{.spec.host}}')

          cat << EOF | oc apply -f-
          apiVersion: v1
          kind: Secret
          metadata:
            annotations:
              opendatahub.io/connection-type: s3
              openshift.io/display-name: My Storage
            labels:
              opendatahub.io/dashboard: "true"
              opendatahub.io/managed: "true"
            name: aws-connection-my-storage
          data:
            AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
            AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
          stringData:
            AWS_DEFAULT_REGION: us-east-1
            AWS_S3_BUCKET: my-storage
            AWS_S3_ENDPOINT: ${MINIO_HOST}
          type: Opaque
          EOF

          cat << EOF | oc apply -f-
          apiVersion: v1
          kind: Secret
          metadata:
            annotations:
              opendatahub.io/connection-type: s3
              openshift.io/display-name: Pipeline Artifacts
            labels:
              opendatahub.io/dashboard: "true"
              opendatahub.io/managed: "true"
            name: aws-connection-pipeline-artifacts
          data:
            AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
            AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
          stringData:
            AWS_DEFAULT_REGION: us-east-1
            AWS_S3_BUCKET: pipeline-artifacts
            AWS_S3_ENDPOINT: ${MINIO_HOST}
          type: Opaque
          EOF
        command:
        - /bin/bash
        image: image-registry.openshift-image-registry.svc:5000/openshift/tools:latest
        imagePullPolicy: IfNotPresent
        name: create-ds-connections
      restartPolicy: Never
      serviceAccountName: car-storage-setup
---
apiVersion: v1
kind: Service
metadata:
  name: car-storage-service
  labels:
    app: car-storage
spec:
  ports:
  - name: api
    port: 9000
    targetPort: api
  - name: console
    port: 9090
    targetPort: 9090
  selector:
    app: car-storage
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: car-storage-console
  labels:
    app: car-storage
spec:
  port:
    targetPort: console
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: edge
  to:
    kind: Service
    name: car-storage-service
    weight: 100
  wildcardPolicy: None
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: car-storage-s3
  labels:
    app: car-storage
spec:
  port:
    targetPort: api
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: edge
  to:
    kind: Service
    name: car-storage-service
    weight: 100
  wildcardPolicy: None
